#!/bin/sh
set -e

FILE=$1
MAIN_LINE=0
MAIN_END_LINE=0

CURRENT_LINE=0
CURRENT_FUNCTION=''
CURRENT_FUNCTION_START_LINE=0
CURRENT_FUNCTION_END_LINE=0
CURRENT_FUNCTION_PARAMS_PASSED=false
CURRENT_FUNCTION_PARAMS=()
CURRENT_FUNCTION_HAS_PARAMS=false
CURRENT_FUNCTION_PARAMS_ORIGINAL=()
CURRENT_FUNCTION_RETURN=''

declare -A VARIABLES
VARIABLES=()

BACKUP_LINE=0

LINE_CONTENT=''

declare -A COLORS
COLORS=([RED]='\033[0;31m' [GREEN]='\033[0;32m' [YELLOW]='\033[1;32m' [BLUE]='\033[0;34m' [WHITE]='\033[1;37m' [BLACK]='\033[0;30m')

return_error() {
  echo -e "\n"
  echo -e "${COLORS[RED]}[ERRO] Linha $BACKUP_LINE"
  echo -e "$ERROR_MESSAGE ${COLORS[WHITE]}"
  exit 1
}

get_main_lines() {
  MAIN_LINE=$(grep -nE 'main' ${FILE} | tr ':' ' ' | awk '{print $1}')
  LINES_TO_THE_AWK=$((${MAIN_LINE} - 1))

  MAIN_END_LINE=$(tail +${MAIN_LINE} ${FILE} | grep -nE -m 1 "}" | tr ':' ' ' | awk '{print $1+'${LINES_TO_THE_AWK}'}')
}

get_function_lines() {
  CURRENT_FUNCTION=$1
  CURRENT_FUNCTION_START_LINE=$(grep -nE "$1" ${FILE} | tr ':' ' ' | awk '{print $1}')

  LINES_TO_THE_AWK=$((${CURRENT_FUNCTION_START_LINE}-1))

  CURRENT_FUNCTION_END_LINE=$(tail +${CURRENT_FUNCTION_START_LINE} ${FILE} | grep -nE -m 1 "}" | tr ':' ' ' | awk '{print $1+'${LINES_TO_THE_AWK}'}')

  BACKUP_LINE=$CURRENT_LINE
  BACKUP_FUNCTION_LINE=$CURRENT_LINE
  CURRENT_LINE=$CURRENT_FUNCTION_START_LINE
  check_if_function_has_params
  run_function
}

get_function_params() {
  PARAMS_STRING="$(echo $LINE_CONTENT | awk '{$1=""; print $0}' | tr ',' ' ' | tr '"' ' ')"
  [[ $PARAMS_STRING != '' ]] && CURRENT_FUNCTION_PARAMS_PASSED=true

  CURRENT_FUNCTION_PARAMS=($PARAMS_STRING)
}

get_content_of_line() {
  LINE_CONTENT=$(tail +${CURRENT_LINE} ${FILE} | head -1)
}

check_if_function_has_params() {
  get_content_of_line
  PARAMS="$(echo $LINE_CONTENT | awk -F'[(]' '{print $2}' | awk -F'[)]' '{print $1}' | tr ',' ' ')"
  CURRENT_FUNCTION_PARAMS_ORIGINAL=($PARAMS)
  ERROR_MESSAGE="Quantidade de parametros para a função $(echo ${CURRENT_FUNCTION} | tr '\\(' ' ')está incorreto!"
  [ ${#CURRENT_FUNCTION_PARAMS[*]} -eq ${#CURRENT_FUNCTION_PARAMS_ORIGINAL[*]} ] || return_error
}

change_function_params() {
  get_content_of_line
  COUNT=0
  for param in ${CURRENT_FUNCTION_PARAMS[*]}
  do
    LINE_CONTENT=$(echo ${LINE_CONTENT} | sed "s/\<${CURRENT_FUNCTION_PARAMS_ORIGINAL[$COUNT]}\>/$param/")
    COUNT=$(( $COUNT + 1 ))
  done
}

run_function() {
  ERROR_MESSAGE='Função inexistente!'

  [[ -z $CURRENT_FUNCTION_START_LINE ]] && return_error
  while [ $CURRENT_LINE -lt $CURRENT_FUNCTION_END_LINE ]
  do
    change_function_params
    read_variables
    there_is_some_call
    update_current_line
  done
  CURRENT_LINE=$(($BACKUP_FUNCTION_LINE + 1))
  CURRENT_FUNCTION=''
  run_main
}

run_main() {
  while [ $CURRENT_LINE -lt $MAIN_END_LINE ]
  do
    get_content_of_line
    read_variables
    there_is_some_call
    update_current_line
  done
}

split_variable() {
  VAR_NAME=$(echo ${LINE_CONTENT} | awk '{ print $2 }')
  VAR_VALUE=$(echo ${LINE_CONTENT} | awk -F'[=]' '{ print $2 }' | sed 's/ //')
  
  run_function_inside_variable
  declare_variable
}

run_function_inside_variable() {
  # TO-DO
  FUNCTION_TO_RUN=$(echo $VAR_VALUE | awk -F'[$]' '{ print $2 }' | awk -F'[<]' '{ print $2 }' | awk -F'[>]' '{ print $1 }')
  if [[ $FUNCTION_TO_RUN != '' ]]
  then
    there_is_some_call
    VAR_VALUE=$LINE_CONTENT
    FUNCTION_TO_RUN=''
  fi
}

declare_variable() {
  VARIABLES[$VAR_NAME]=$VAR_VALUE
  VAR_VALUE=''
  VAR_NAME=''
  unset $VAR_NAME
  unset $VAR_VALUE
}

read_variables() {
  BACKUP_LINE=$CURRENT_LINE
  VAR_QNT_IN_LINE=$(echo ${LINE_CONTENT} | grep -o '$(' | wc -l)
  COUNT=0
  while [ $COUNT -lt $VAR_QNT_IN_LINE ]
  do
    VAR_NAME=$(echo ${LINE_CONTENT} | awk -F'[$]' '{ print $2 }' | awk -F'[(]' '{ print $2 }' | awk -F'[)]' '{ print $1 }')
    [[ ${VAR_NAME} = '' ]] && break

    ERROR_MESSAGE="Variável $VAR_NAME não foi declarada anteriormente!"
    [[ -z ${VARIABLES[$VAR_NAME]} ]] && return_error
  
    LINE_CONTENT=$(echo $LINE_CONTENT | sed "s/\$(${VAR_NAME})/${VARIABLES[$VAR_NAME]}/g")
    COUNT=$(( $COUNT + 1 ))
  done
}

return_value() {
  CURRENT_FUNCTION_RETURN=$(echo $LINE_CONTENT | awk -F'[:]' '{ print $2 }' | sed 's/ //')
  BACKUP_LINE=$CURRENT_LINE
  CURRENT_LINE=$BACKUP_FUNCTION_LINE

  get_content_of_line
  CURRENT_FUNCTION=$(echo $CURRENT_FUNCTION | tr '\\(' ' ' | sed 's/ //g')
  LINE_CONTENT=$(echo $LINE_CONTENT | sed "s/${CURRENT_FUNCTION}/${CURRENT_FUNCTION_RETURN}/")

  CURRENT_FUNCTION_RETURN=''

  CURRENT_LINE=$(($BACKUP_LINE))
}

update_current_line() {
  CURRENT_LINE=$(($CURRENT_LINE + 1))
}

there_is_some_call() {
  CALL=$(echo ${LINE_CONTENT} | awk '{print $1}')

  if [ "${FUNCTION_TO_RUN}" != '' ]
  then
    LINE_CONTENT=$FUNCTION_TO_RUN
    CALL=$(echo ${FUNCTION_TO_RUN} | awk '{ print $1 }')
    
  fi
  

  if [ "$CALL" = 'diga' ] 
  then
    STRING_TO_READ=$(echo $LINE_CONTENT | awk -F'["]' '{ print $2 }')
    echo $STRING_TO_READ
    #echo "$(echo ${LINE_CONTENT} | awk -F'["]' '{print $2}')"

  elif [ "$CALL" = 'print' ]
  then
    STRING_TO_READ=$(echo $LINE_CONTENT | awk -F'["]' '{ print $2 }')
    printf "$STRING_TO_READ"

  elif [ "$CALL" = 'calc' ]
  then
    EXPRESSION=$( echo ${LINE_CONTENT} | awk '{print $2}' )
    LINE_CONTENT=$(awk "BEGIN {print $EXPRESSION}")

  elif [ "$CALL" = 'var' ]
  then
    split_variable

  elif [[ "$CALL" = 'return:' && $CURRENT_FUNCTION != '' ]]
  then
    return_value

  # Exec user-made functions  
  elif [[ "$CALL" != '' && "$CURRENT_FUNCTION" = '' ]]
  then
    get_function_params
    get_function_lines "$CALL\("
  fi

}

interpret() {
  ERROR_MESSAGE='Você precisa passar um código .shitty como parametro!'
  [[ -z $1 ]] && return_error
  get_main_lines
  CURRENT_LINE=$((${MAIN_LINE} + 1))
  run_main
}
interpret $FILE
